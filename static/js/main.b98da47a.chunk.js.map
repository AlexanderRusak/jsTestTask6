{"version":3,"sources":["components/footer.js","components/header.js","App.js","serviceWorker.js","components/actors.js","components/main.js","index.js"],"names":["Footer","React","Component","Header","href","App","children","Boolean","window","location","hostname","match","Actors","props","state","result","nextLink","prevLink","newActor","setNextLinkWithActors","setState","next","setPrevLinkWithActors","previous","setActors","getActors","objectResults","actors","actor","push","name","clickNext","fetchGetActorsFromLink","clickPrevious","link","fetch","then","json","catch","error","clickAddNewActor","results","changeInputNewActor","event","target","value","clickDeleteActor","pop","bind","this","map","onClick","disabled","className","onChange","type","Main","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kRAgBeA,E,iLAVP,OACI,gCACI,2C,GANKC,IAAMC,WCcZC,E,iLAVP,OACI,gCACI,6BACI,uBAAGC,KAAK,KAAR,8CACA,uBAAGA,KAAK,WAAR,8C,GARCH,IAAMC,WCUZG,EARH,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACV,kBAAC,WAAD,KACE,kBAAC,EAAD,MACCA,EACD,kBAAC,EAAD,QCIgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCiFSC,E,YA5FX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAOVC,MAAQ,CACJC,OAAQ,GACRC,SAAU,KACVC,SAAU,KACVC,SAAU,MAZK,EAiBnBC,sBAAwB,SAAAJ,GACpB,EAAKK,SAAS,CAAEJ,SAAUD,EAAOM,QAlBlB,EAoBnBC,sBAAwB,SAAAP,GACpB,EAAKK,SAAS,CAAEH,SAAUF,EAAOQ,YArBlB,EAuBnBC,UAAY,SAAAT,GACR,EAAKK,SAAS,CAAEL,WAChB,EAAKI,sBAAsBJ,GAC3B,EAAKO,sBAAsBP,IA1BZ,EA4BnBU,UAAY,SAACC,GACT,IAAIC,EAAS,GACb,IAAK,IAAIC,KAASF,EACdC,EAAOE,KAAKH,EAAcE,GAAOE,MAErC,OAAOH,GAjCQ,EAmCnBI,UAAY,WACR,EAAKC,uBAAuB,EAAKlB,MAAME,WApCxB,EAsCnBiB,cAAgB,WACZ,EAAKD,uBAAuB,EAAKlB,MAAMG,WAvCxB,EAyCnBe,uBAAyB,SAAAE,GACrBC,MAAMD,GACDE,MAAK,SAAArB,GAAM,OAAIA,EAAOsB,UACtBD,MAAK,SAAArB,GAAM,OAAI,EAAKS,UAAUT,MAC9BuB,OAAM,SAAAC,GAAK,OAAIA,MA7CL,EA+CnBC,iBAAmB,WACf,EAAK1B,MAAMC,OAAO0B,QAAQZ,KAAK,CAAEC,KAAM,EAAKhB,MAAMI,WAClD,EAAKE,SAAS,CAAEF,SAAU,QAjDX,EAmDnBwB,oBAAsB,SAACC,GACnB,EAAKvB,SAAS,CAAEF,SAAUyB,EAAMC,OAAOC,SApDxB,EAsDnBC,iBAAiB,WACb,EAAKhC,MAAMC,OAAO0B,QAAQM,MAC1B,EAAK3B,SAAS,CAAEF,SAAU,QAtD1B,EAAKa,UAAY,EAAKA,UAAUiB,KAAf,gBACjB,EAAKf,cAAgB,EAAKA,cAAce,KAAnB,gBACrB,EAAKR,iBAAmB,EAAKA,iBAAiBQ,KAAtB,gBACxB,EAAKN,oBAAsB,EAAKA,oBAAoBM,KAAzB,gBAC3B,EAAKF,iBAAkB,EAAKA,iBAAiBE,KAAtB,gBANR,E,iFAefC,KAAKjB,uBArBI,kC,+BAiET,OACI,8BACI,4BACKiB,KAAKxB,UAAUwB,KAAKnC,MAAMC,OAAO0B,SAASS,KAAI,SAACtB,GAAD,OAC3C,4BAAKA,OAIb,iCACMqB,KAAKnC,MAAMG,SACR,4BAAQkC,QAASF,KAAKhB,eAAtB,YACA,4BAAQmB,UAAQ,EAACD,QAASF,KAAKhB,eAA/B,YAEHgB,KAAKnC,MAAME,SACR,4BAAQmC,QAASF,KAAKlB,WAAtB,QACA,4BAAQqB,UAAQ,EAACD,QAASF,KAAKlB,WAA/B,SAGT,6BAASsB,UAAU,eACf,2BAAOC,SAAUL,KAAKP,oBAAqBa,KAAK,SAC9CN,KAAKnC,MAAMI,SACR,2BAAOiC,QAASF,KAAKT,iBAAkBe,KAAK,SAASV,MAAM,kBAC3D,2BAAOO,UAAQ,EAACD,QAASF,KAAKT,iBAAkBe,KAAK,SAASV,MAAM,kBAEzE,2BAAOM,QAASF,KAAKH,iBAAkBS,KAAK,SAASV,MAAM,uB,GArF1D5C,IAAMC,WCSZsD,E,iLARP,OACI,8BACI,yC,GANGvD,IAAMC,WCOzBuD,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWL,IACjC,kBAAC,IAAD,CAAOI,KAAK,UAAUC,UAAWjD,OAG3BkD,SAASC,eAAe,SHkHxC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,kB","file":"static/js/main.b98da47a.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\n\r\nclass Footer extends React.Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <footer>\r\n                <h1>Footer</h1>\r\n            </footer>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer;","import React, { Fragment } from 'react';\r\n\r\nclass Header extends React.Component{\r\n\r\n\r\n    render(){\r\n        return(\r\n            <header>\r\n                <nav>\r\n                    <a href=\"/\">Главная</a>\r\n                    <a href=\"/actors\">Актёры</a>\r\n                </nav>\r\n            </header>\r\n        )\r\n    }\r\n}\r\nexport default Header;","import React, { Fragment } from 'react';\nimport './App.css';\nimport Footer from './components/footer';\nimport Header from './components/header';\nconst App = ({ children }) => (\n  <Fragment>\n    <Header />\n    {children}\n    <Footer />\n  </Fragment>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Fragment } from 'react';\r\nconst BASE_URL = \"https://swapi.co/api/people/\";\r\n\r\n\r\n\r\nclass Actors extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.clickNext = this.clickNext.bind(this);\r\n        this.clickPrevious = this.clickPrevious.bind(this);\r\n        this.clickAddNewActor = this.clickAddNewActor.bind(this);\r\n        this.changeInputNewActor = this.changeInputNewActor.bind(this);\r\n        this.clickDeleteActor= this.clickDeleteActor.bind(this);\r\n    }\r\n    state = {\r\n        result: {},\r\n        nextLink: null,\r\n        prevLink: null,\r\n        newActor: null,\r\n    }\r\n    componentDidMount() {\r\n        this.fetchGetActorsFromLink(BASE_URL);\r\n    }\r\n    setNextLinkWithActors = result => {\r\n        this.setState({ nextLink: result.next });\r\n    }\r\n    setPrevLinkWithActors = result => {\r\n        this.setState({ prevLink: result.previous })\r\n    }\r\n    setActors = result => {\r\n        this.setState({ result });\r\n        this.setNextLinkWithActors(result);\r\n        this.setPrevLinkWithActors(result);\r\n    }\r\n    getActors = (objectResults) => {\r\n        let actors = [];\r\n        for (let actor in objectResults) {\r\n            actors.push(objectResults[actor].name);\r\n        }\r\n        return actors;\r\n    }\r\n    clickNext = () => {\r\n        this.fetchGetActorsFromLink(this.state.nextLink);\r\n    }\r\n    clickPrevious = () => {\r\n        this.fetchGetActorsFromLink(this.state.prevLink);\r\n    }\r\n    fetchGetActorsFromLink = link => {\r\n        fetch(link)\r\n            .then(result => result.json())\r\n            .then(result => this.setActors(result))\r\n            .catch(error => error);\r\n    }\r\n    clickAddNewActor = () => {\r\n        this.state.result.results.push({ name: this.state.newActor })\r\n        this.setState({ newActor: null })\r\n    }\r\n    changeInputNewActor = (event) => {\r\n        this.setState({ newActor: event.target.value })\r\n    }\r\n    clickDeleteActor=()=>{\r\n        this.state.result.results.pop();\r\n        this.setState({ newActor: null })\r\n    }\r\n    render() {\r\n        return (\r\n            <main>\r\n                <ul>\r\n                    {this.getActors(this.state.result.results).map((actor) => (\r\n                        <li>{actor}</li>\r\n                    ))}\r\n\r\n                </ul>\r\n                <section>\r\n                    {(this.state.prevLink) ?\r\n                        (<button onClick={this.clickPrevious}>Previous</button>) :\r\n                        (<button disabled onClick={this.clickPrevious}>Previous</button>)\r\n                    }\r\n                    {(this.state.nextLink) ?\r\n                        (<button onClick={this.clickNext}>Next</button>) :\r\n                        (<button disabled onClick={this.clickNext}>Next</button>)\r\n                    }\r\n                </section>\r\n                <section className=\"addNewActor\">\r\n                    <input onChange={this.changeInputNewActor} type=\"text\" />\r\n                    {(this.state.newActor) ?\r\n                        (<input onClick={this.clickAddNewActor} type=\"button\" value=\"add new actor\" />) :\r\n                        (<input disabled onClick={this.clickAddNewActor} type=\"button\" value=\"add new actor\" />)\r\n                    }\r\n                    <input onClick={this.clickDeleteActor} type=\"button\" value=\"delete actor\" />\r\n                </section>\r\n            </main>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\nexport default Actors;","import React, { Fragment } from 'react';\r\n\r\nclass Main extends React.Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <main>\r\n                <h1>Main</h1>\r\n            </main>\r\n\r\n        )\r\n    }\r\n}\r\nexport default Main;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Switch , Route } from 'react-router-dom';\nimport Actors from './components/actors';\nimport Main from './components/main';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App>\n            <Switch>\n                <Route exact path=\"/\" component={Main}/>\n                <Route path=\"/actors\" component={Actors}/>\n            </Switch>\n        </App>\n    </BrowserRouter>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}